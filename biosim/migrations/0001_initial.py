# Generated by Django 5.1.7 on 2025-04-04 14:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('criteria', models.JSONField(verbose_name='Critères de déblocage')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Réalisation',
                'verbose_name_plural': 'Réalisations',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé')], max_length=20, verbose_name='Difficulté')),
                ('duration', models.CharField(max_length=20, verbose_name='Durée')),
                ('icon', models.CharField(max_length=50, verbose_name='Icône')),
                ('image', models.ImageField(blank=True, null=True, upload_to='experiments/', verbose_name='Image')),
                ('theory_content', models.TextField(blank=True, verbose_name='Contenu théorique')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Expérience',
                'verbose_name_plural': 'Expériences',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='SimulationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variables_config', models.JSONField(verbose_name='Configuration des variables')),
                ('results_data', models.JSONField(verbose_name='Données des résultats')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('duration', models.PositiveIntegerField(verbose_name='Durée (secondes)')),
                ('completed', models.BooleanField(default=True, verbose_name='Terminé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='biosim.experiment', verbose_name='Expérience')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='simulation_results', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Résultat de simulation',
                'verbose_name_plural': 'Résultats de simulation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notes', to='biosim.experiment', verbose_name='Expérience')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Note utilisateur',
                'verbose_name_plural': 'Notes utilisateur',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('high_quality', models.BooleanField(default=True, verbose_name='Haute qualité graphique')),
                ('sound_enabled', models.BooleanField(default=True, verbose_name='Sons activés')),
                ('tutorial_completed', models.BooleanField(default=False, verbose_name='Tutoriel terminé')),
                ('preferences', models.JSONField(blank=True, default=dict, verbose_name='Préférences supplémentaires')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='biosim_preferences', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Préférence utilisateur',
                'verbose_name_plural': 'Préférences utilisateur',
            },
        ),
        migrations.CreateModel(
            name='ExperimentVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('display_name', models.CharField(max_length=100, verbose_name='Nom affiché')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('min_value', models.FloatField(verbose_name='Valeur minimale')),
                ('max_value', models.FloatField(verbose_name='Valeur maximale')),
                ('default_value', models.FloatField(verbose_name='Valeur par défaut')),
                ('unit', models.CharField(blank=True, max_length=20, verbose_name='Unité')),
                ('color', models.CharField(blank=True, max_length=20, verbose_name='Couleur')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Ordre')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='biosim.experiment', verbose_name='Expérience')),
            ],
            options={
                'verbose_name': "Variable d'expérience",
                'verbose_name_plural': "Variables d'expérience",
                'ordering': ['experiment', 'order', 'name'],
                'unique_together': {('experiment', 'name')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='biosim.achievement', verbose_name='Réalisation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réalisation utilisateur',
                'verbose_name_plural': 'Réalisations utilisateur',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
